'use strict';

var React = require('react');
var ReactDOM = require('react-dom');
var _isString = require('lodash/isString');
var sparkFactory = require('./spark');

function factory(options) {

  var proxyElements = {};
  var spark = sparkFactory(options);
  var invalidate = spark.invalidate;
  var enableInvalidationInterval = spark.enableInvalidationInterval;
  var disableInvalidationInterval = spark.disableInvalidationInterval;

  var sparkScrollFactory = function sparkScrollFactory(defaultComponent) {
    return React.createClass({
      displayName: 'SparkScroll' + (_isString(defaultComponent) ? defaultComponent : defaultComponent.displayName),

      render: function render() {
        var Component = this.props.component || defaultComponent;
        return React.createElement(
          Component,
          this.props,
          this.props.children
        );
      },

      componentDidMount: function componentDidMount() {
        var _this = this;

        var element = ReactDOM.findDOMNode(this);

        if (this.props.proxy) {
          spark(element, function () {
            return proxyElements[_this.props.proxy] || element;
          }, this.props.timeline, this.props);
        } else {
          spark(element, function () {
            return element;
          }, this.props.timeline, this.props);
        }
      },

      componentWillUnmount: function componentWillUnmount() {
        spark.cleanup();
      }

    });
  };

  var SparkScroll = sparkScrollFactory('div');
  SparkScroll.div = SparkScroll;

  var sparkProxyFactory = function sparkProxyFactory(defaultComponent) {
    return React.createClass({
      displayName: 'SparkProxy.' + (_isString(defaultComponent) ? defaultComponent : defaultComponent.displayName),

      render: function render() {
        var Component = this.props.component || defaultComponent;
        return React.createElement(
          Component,
          this.props,
          this.props.children
        );
      },

      componentDidMount: function componentDidMount() {
        proxyElements[this.props.proxyId] = ReactDOM.findDOMNode(this);
      },

      componentWillUnmount: function componentWillUnmount() {
        delete proxyElements[this.props.proxyId];
      }
    });
  };

  var SparkProxy = sparkProxyFactory('div');
  SparkProxy.div = SparkProxy;

  ['span', 'h1', 'h2', 'h3', 'h4', 'h5', 'li', 'ul', 'ol', 'header', 'section'].forEach(function (tag) {
    SparkScroll[tag] = sparkScrollFactory(tag);
    SparkProxy[tag] = sparkProxyFactory(tag);
  });

  return {
    sparkScrollFactory: sparkScrollFactory,
    sparkProxyFactory: sparkProxyFactory,
    SparkScroll: SparkScroll,
    SparkProxy: SparkProxy,
    invalidate: invalidate,
    enableInvalidationInterval: enableInvalidationInterval,
    disableInvalidationInterval: disableInvalidationInterval
  };
}

module.exports = factory;